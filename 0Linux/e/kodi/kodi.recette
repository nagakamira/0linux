#!/usr/bin/env bash
. /usr/share/0outils/fonctions_paquets.sh

VERSION=16.0
WGET=http://mirrors.xbmc.org/releases/source/$VERSION-Jarvis.tar.gz
DESC="Le centre multimédia Kodi (anciennement nommé XBMC)"

telecharger_sources

# On compile XBMC/Kodi :
preparer_sources $VERSION-Jarvis.tar.gz
cflags

# On corrige des références non-existantes :
sed -i -e 's@/usr/bin/lsb_release -d@cat /etc/os-release@' xbmc/utils/SystemInfo.cpp

# On corrige les inclusions pour Samba 4 :
sed -i 's@#include <libsmbclient\.h>@#include <samba-4.0/libsmbclient.h>@g' $(find xbmc/filesystem -type f -name "*.cpp")

# On corrige les inclusions pour 'libmicrohttpd' :
sed -i 's@#include <microhttpd\.h>@#include <libmicrohttpd/microhttpd.h>@g' xbmc/network/httprequesthandler/IHTTPRequestHandler.h

# On évite d'avoir des délais trop long en l'absence de powerkit, merci Gentoo :
sed -i '/dbus_connection_send_with_reply_and_block/s:-1:3000:' xbmc/linux/*.cpp

# On utlise les instruction SSE2 si elles sont disponibles :
if [ ! "$(grep 'sse2' /proc/cpuinfo)" = "" ]; then
	FLAGS="${FLAGS} -DSQUISH_USE_SSE=2 -msse2"
fi

# On génère le nécessaire à la compilation :
chmod +x bootstrap
./bootstrap

# On utilise notre Python 2 système :
export PYTHON_VERSION=2

# Compilation :
CFLAGS="${FLAGS}" CXXFLAGS="${FLAGS}" \
ac_cv_type__Bool=yes \
./configure \
	--prefix=/usr \
	--exec-prefix=/usr \
	--sysconfdir=/etc \
	--localstatedir=/var \
	--libdir=/usr/lib${LIBDIRSUFFIX} \
	--mandir=/usr/man \
	--infodir=/usr/info \
	--docdir=/usr/doc/${NAMETGZ}-${VERSION} \
	--disable-debug \
	--enable-libbluray \
	--enable-optimizations \
	--enable-shared-libraries \
	--build=${PKGARCH}-0linux-linux-gnu

make -j${JOBS} || make
fakeroot make install DESTDIR=${PKG}
python -m compileall $PKG/usr/share/${NAMETGZ}/addons/service.xbmc.versioncheck

# On place l'outil 'TexturePacker' et on le lie à '/usr/bin' :
cp tools/TexturePacker/TexturePacker ${PKG}/usr/lib${LIBDIRSUFFIX}/kodi/
chmod 755 ${PKG}/usr/lib${LIBDIRSUFFIX}/kodi/TexturePacker
ln -sf ../lib${LIBDIRSUFFIX}/kodi/TexturePacker ${PKG}/usr/bin/

# 'lsb_release' n'existe pas sous 0Linux :
sed -i -e 's/which lsb_release &> \/dev\/null/\[ -f \/etc\/os-release ]/g' ${PKG}/usr/bin/xbmc
sed -i -e "s/lsb_release -a 2> \/dev\/null | sed -e 's\/\^\/    \/'/cat \/etc\/os-release/g" ${PKG}/usr/bin/xbmc

# On crée un fichier de démarrage pour lancer uniquement 'xbmc' en tant que « bureau » :
mkdir -p ${PKG}/etc/X11/xinit
cat > ${PKG}/etc/X11/xinit/xinitrc.kodi << "EOF"
#!/bin/sh

userresources=$HOME/.Xresources
usermodmap=$HOME/.Xmodmap
sysresources=/etc/X11/xinit/.Xresources
sysmodmap=/etc/X11/xinit/.Xmodmap

if [ -f $sysresources ]; then
	/usr/bin/xrdb -merge $sysresources
fi

if [ -f $sysmodmap ]; then
	/usr/bin/xmodmap $sysmodmap
fi

if [ -f $userresources ]; then
	/usr/bin/xrdb -merge $userresources
fi

if [ -f $usermodmap ]; then
	/usr/bin/xmodmap $usermodmap
fi

if [ -z "$DESKTOP_SESSION" -a -x /usr/bin/ck-launch-session ]; then
	exec ck-launch-session dbus-launch --exit-with-session /usr/bin/xbmc-standalone
else
	exec dbus-launch --exit-with-session /usr/bin/xbmc-standalone
fi

EOF
chmod 755 ${PKG}/etc/X11/xinit/xinitrc.kodi

installer_doc

# On nettoie :
find ${PKG} -type f -name "*.in" -delete

creer_post_installation
stripper
empaqueter

# C'est fini.
