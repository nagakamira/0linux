#!/usr/bin/env bash
. /usr/share/0outils/fonctions_paquets.sh

NAMESRC=NVIDIA
VERSION=361.42
EXT=run

# On teste l'architecture pour savoir quelle archive télécharger :
cflags
if [ "${PKGARCH}" = "i686" ]; then
	SUBARCH="x86"
elif [ "${PKGARCH}" = "x86_64" ]; then
	SUBARCH="x86_64"
fi

WGET=ftp://download.nvidia.com/XFree86/Linux-$SUBARCH/$VERSION/$NAMESRC-Linux-$SUBARCH-$VERSION.$EXT
DESC="Pilotes et bibliothèques graphiques propriétaires de Nvidia"

telecharger_sources

# On crée les répertoires d'accueil :
mkdir -p ${PKG}/etc/OpenCL/vendors
mkdir -p ${PKG}/etc/modprobe.d
mkdir -p ${PKG}/etc/X11/xorg.conf.d
mkdir -p ${PKG}/lib/modules/$(uname -r)/kernel/drivers/video
mkdir -p ${PKG}/usr/bin
mkdir -p ${PKG}/usr/include/GL
mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/vdpau
mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/xorg/modules/{drivers,extensions}
mkdir -p ${PKG}/usr/man/man1
mkdir -p ${PKG}/usr/share/{applications,pixmaps}

# On déballe et on se place dans les sources :
cd $TMP
rm -rf ${NAMESRC}-Linux-${SUBARCH}-${VERSION}
echo "Extraction en cours..."
sh ${PKGSOURCES}/${NAMETGZ}/$NAMESRC-Linux-${SUBARCH}-${VERSION}.${EXT} --extract-only
cd ${NAMESRC}-Linux-${SUBARCH}-${VERSION}

# On vérifie les permissions des sources :
find . \
	\( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) -exec chmod 755 {} \; -o \
	\( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# On compile le module noyau :
cd kernel
SYSSRC=/usr/lib${LIBDIRSUFFIX}/modules/$(uname -r)/build make -j${JOBS} module || \
	SYSSRC=/usr/lib${LIBDIRSUFFIX}/modules/$(uname -r)/build make module

# On place le module où il faut :
cp -a nvidia.ko ${PKG}/lib/modules/$(uname -r)/kernel/drivers/video/

# On copie les bibliothèques :
cd $TMP/${NAMESRC}-Linux-${SUBARCH}-${VERSION}

# On copie l'entête OpenGL :
cp -a gl*.h ${PKG}/usr/include/GL

# On copie l'extension GLX :
cp -a libglx.so.* ${PKG}/usr/lib${LIBDIRSUFFIX}/xorg/modules/extensions/

# On copie le pilote pour X :
cp -a nvidia_drv.so ${PKG}/usr/lib${LIBDIRSUFFIX}/xorg/modules/drivers/
chmod 755 ${PKG}/usr/lib${LIBDIRSUFFIX}/xorg/modules/drivers/nvidia_drv.so

# On copie les bibliothèques sans vergogne pour écraser celles du système... :
mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/tls
cp -a tls/lib*.so* ${PKG}/usr/lib${LIBDIRSUFFIX}/tls/
cp -a *.{la,so*} ${PKG}/usr/lib${LIBDIRSUFFIX}/

# Idem pour le 32 bits multilib :
if [ "${PKGARCH}" = "x86_64" ]; then
	mkdir -p ${PKG}/usr/lib/tls
	cp -a tls/lib*.so* ${PKG}/usr/lib/tls/
	cp -a 32/*.{la,so*} ${PKG}/usr/lib/
fi

# OpenCL :
cp -a nvidia.icd ${PKG}/etc/OpenCL/vendors/

# On copie les binaires et exécutables :
cp -a \
	nvidia-bug-report.sh \
	nvidia-cuda-mps-control \
	nvidia-cuda-mps-server \
	nvidia-debugdump \
	nvidia-smi \
	${PKG}/usr/bin/
chmod 755 ${PKG}/usr/bin/*

# On place les manuels sans la compression (on a notre traitement avec xz-utils) :
zcat nvidia-cuda-mps-control.1.gz > ${PKG}/usr/man/man1/nvidia-cuda-mps-control.1
zcat nvidia-smi.1.gz > ${PKG}/usr/man/man1/nvidia-smi.1

# On crée un fichier blacklist pour empêcher 'nouveau'/'nv' de se charger :
cat > ${PKG}/etc/modprobe.d/blacklist-nouveau-nv.conf << "EOF"
blacklist nouveau
blacklist nv

EOF

# On crée une configuration pour charger le pilote Nvidia dans X et on
# prend garde à ne rien écraser :
cat > ${PKG}/etc/X11/xorg.conf.d/nvidia.conf.0nouveau << "EOF"
Section "Device"
	Identifier "nvidia Device"
	Driver "nvidia"
EndSection

Section "ServerFlags"
	Option  "IgnoreABI" "True"
EndSection

EOF

# On crée tous les liens pour les bibliothèques et on espère chaleureusement
# que Nvidia fera un jour un effort pour sa méthode d'installation :
for lib in $(find ${PKG} -type f -name "*.so.*"); do
	ln -sf $(basename ${lib}) $(echo ${lib} | sed -e 's@\.so.*$@\.so@')
done

# On place 'nvidia-settings' :
install -m 755 nvidia-settings ${PKG}/usr/bin/
zcat nvidia-settings.1.gz > ${PKG}/usr/man/man1/nvidia-settings.1
install -m 644 nvidia-settings.desktop ${PKG}/usr/share/applications/
install -m 644 nvidia-settings.png ${PKG}/usr/share/pixmaps/

# On place 'nvidia-xconfig' :
install -m 755 nvidia-xconfig ${PKG}/usr/bin/
zcat nvidia-xconfig.1.gz > ${PKG}/usr/man/man1/nvidia-xconfig.1

# On corrige ce fatras de chemins incorrects :
sed -i "s|__LIBGL_PATH__|/usr/lib${LIBDIRSUFFIX}/|" ${PKG}/usr/lib${LIBDIRSUFFIX}/libGL.la
sed -i "s|/usr/X11R6/lib|/usr/lib${LIBDIRSUFFIX}/|" ${PKG}/usr/lib${LIBDIRSUFFIX}/libGL.la
sed -i "s|__UTILS_PATH__|/usr/bin|" ${PKG}/usr/share/applications/nvidia-settings.desktop
sed -i "s|__PIXMAP_PATH__|/usr/share/pixmaps|" ${PKG}/usr/share/applications/nvidia-settings.desktop
sed -i "s|__NVIDIA_SETTINGS_DESKTOP_CATEGORIES__|Application;Settings;|" ${PKG}/usr/share/applications/nvidia-settings.desktop

installer_doc

# On complète la documentation :
cp -a $CWD/0-LISEZMOI ${PKG}/usr/doc/${NAMETGZ}-${VERSION}

creer_post_installation

# On complète la post-installation : :
cat >> ${PKG}/post-install.sh << EOF
# On ajoute le module CUDA/OpenCL à charger :
if ! grep -q nvidia-modprobe etc/rc.d/rc.modules; then
	echo "nvidia-modprobe -c 0 -u" >> etc/rc.d/rc.modules
fi

chroot . depmod -a

# On prévient l'utilisateur sur la nature intrusive du paquet :
echo "***"
echo "IMPORTANT : veuillez lire le fichier '/usr/doc/${NAMETGZ}/0-LISEZMOI'"
echo "si vous prévoyez plus tard de désinstaller '${NAMETGZ}' !"
echo "***"

EOF

stripper
empaqueter

# C'est fini.
