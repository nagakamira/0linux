#!/usr/bin/env bash
. /usr/share/0outils/fonctions_paquets.sh

VERSION=2.22
WGET=http://mirror1.babylon.network/gnu/$NAMESRC/$NAMESRC-$VERSION.tar.xz
DESC="Bibliothèques C système vitales"
EXTRADEPS="base-systeme busybox"

telecharger_sources
preparer_sources # À partir d'ici, on se trouve dans les sources décompactées.
cflags

# On crée les répertoires d'accueil :
mkdir -p ${PKG}/var/{db,run}/nscd

# On corrige un nombre important de bugs :
cat $CWD/glibc-2.22-bugfix.patch | patch -p1

# On ne compile pas les fuseaux horaires, le paquet 'tzdata' s'en charge :
sed -i 's/localedata timezone rt/localedata rt/' Makeconfig

# On active la parallélisation :
sed -i "s@# PARALLELMFLAGS = -j 4@PARALLELMFLAGS = -j${JOBS}@" Makefile.in

# On préfère avoir des répertoires pour les définitions des locales plutôt
# qu'une grosse archive, ça nous permettra d'alléger le live :
sed -i 's@--alias-file=\.\./intl/locale\.alias@--alias-file=../intl/locale.alias --no-archive@' localedata/Makefile

# On crée un répertoire séparé pour la compilation :
rm -rf $TMP/${NAMESRC}-build-${PKGARCH}
mkdir -p $TMP/${NAMESRC}-build-${PKGARCH}
cd $TMP/${NAMESRC}-build-${PKGARCH}

# Ce lien aide dans le processus de compilation selon l'hôte et la machine ciblée :
ln -sf ${NAMESRC}-build-${PKGARCH} $TMP/${PKGARCH}

# On configure nos répertoire de bibliothèques :
echo "slibdir=/usr/lib${LIBDIRSUFFIX}" >> configparms
echo "rtlddir=/usr/lib${LIBDIRSUFFIX}" >> configparms
echo "sbindir=/usr/bin" >> configparms
echo "rootsbindir=/usr/bin" >> configparms

# Sur i686, ce drapeau permet de régler certains problèmes avec Xen :
if [ "${PKGARCH}" = "i686" ]; then
	EXTRAFLAG="-mno-tls-direct-seg-refs"
fi

# Compilation avec une optimisation maximale :
CFLAGS="$(echo "${FLAGS}" | sed 's/-O2/-O3/') ${EXTRAFLAG}" \
CXXFLAGS="$(echo "${FLAGS}" | sed 's/-O2/-O3/') ${EXTRAFLAG}" \
$TMP/${NAME}/configure \
	--prefix=/usr \
	--sysconfdir=/etc \
	--localstatedir=/var \
	--libdir=/usr/lib${LIBDIRSUFFIX} \
	--libexecdir=/usr/lib${LIBDIRSUFFIX} \
	--mandir=/usr/man \
	--infodir=/usr/info \
	--disable-profile \
	--disable-werror \
	--enable-add-ons \
	--enable-bind-now \
	--enable-kernel=3.4.0 \
	--enable-lock-elision \
	--enable-obsolete-rpc \
	--enable-multi-arch \
	--enable-stackguard-randomization \
	--build=${PKGARCH}-0linux-linux-gnu

# build libraries with hardening disabled
echo "build-programs=no" >> configparms
make -j${JOBS} || make

# re-enable hardening for programs
sed -i "/build-programs=/s#no#yes#" configparms
echo "CC += -fstack-protector-strong -D_FORTIFY_SOURCE=2" >> configparms
echo "CXX += -fstack-protector-strong -D_FORTIFY_SOURCE=2" >> configparms
make -j${JOBS} || make

# On lance la suite de tests si $TESTS est positionnée :
if [ ! "${TESTS}" = "" ]; then
        sed -i '5,7d' configparms
	cp  $TMP/${NAME}/iconvdata/gconv-modules iconvdata
	make -k check 2>&1 || true # On ne quitte pas sur les erreurs rencontrées
fi

fakeroot make -j${JOBS} install install_root=${PKG}
fakeroot make -j${JOBS} localedata/install-locales install_root=${PKG}

# On déplace toutes les bibliothèques dans un répertoire (hors bibliothèques)
# qui fera tampon pour des mises à niveau transparentes :
mkdir -p ${PKG}/usr/libc_tampon
mv ${PKG}/lib${LIBDIRSUFFIX}/*so* ${PKG}/usr/libc_tampon/ || true
mv ${PKG}/usr/lib${LIBDIRSUFFIX}/*so* ${PKG}/usr/libc_tampon/

# Sauf celle-ci qu'on remet en place :
mv ${PKG}/usr/libc_tampon/libSegFault.so ${PKG}/usr/lib${LIBDIRSUFFIX}/

# On ne conserve que les bibliothèques dynamiques et les liens :
rm -f ${PKG}/usr/libc_tampon/*.{a,map}

# On supprime tous les liens symboliques, on les créera nous-même en post-installation :
find ${PKG}/usr/libc_tampon -type l -delete || true
find ${PKG}/lib${LIBDIRSUFFIX} -type l -delete || true
find ${PKG}/usr/lib${LIBDIRSUFFIX} -type l -delete || true

# On renomme ce qui reste avec une extension '.newlib' :
for newlib in ${PKG}/usr/libc_tampon/*; do
	mv ${newlib}{,.newlib}
done

# On place la configuration de nscd :
cp -a $TMP/${NAME}/nscd/nscd.conf ${PKG}/etc/

# On nettoie :
rm -f ${PKG}/etc/ld.so.cache

# On crée un '/etc/ld.so.conf' large et on ajoute une ligne 'include' incluant 
# les fichiers présents dans 'ld.so.conf.d' :
mkdir -p ${PKG}/etc/ld.so.conf.d
cat >> ${PKG}/etc/ld.so.conf << EOF
/usr/local/lib${LIBDIRSUFFIX}
/usr/lib${LIBDIRSUFFIX}
/opt/lib${LIBDIRSUFFIX}
include /etc/ld.so.conf.d/*.conf

EOF

# On n'appelle surtout pas 'creer_post_installation', laquelle appelle 'ldconfig'.
# On crée donc toute la post-installation à la main :
cat $CWD/post-install.sh >> ${PKG}/post-install.sh

# On remplace tous les marqueurs par $LIBDIRSUFFIX et $VERSION :
sed -i "s@ARCH@${LIBDIRSUFFIX}@g" ${PKG}/post-install.sh
sed -i "s@VERSION@${VERSION}@g"   ${PKG}/post-install.sh

installer_doc
# stripper # On conserve les symboles de débogage pour faire taire 'gdb'.
empaqueter

# C'est fini.
