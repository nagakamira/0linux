#!/usr/bin/env bash
. /usr/share/0outils/fonctions_paquets.sh

NAMESRC=qt-everywhere-opensource-src
VERSION=5.5.1
WGET=http://download.qt-project.org/official_releases/qt/$(echo $VERSION | cut -d'.' -f1-2)/$VERSION/single/$NAMESRC-$VERSION.tar.xz
DESC="Qt 5 : outils et bibliothèques de création d'applications graphiques"

telecharger_sources
preparer_sources
cflags

# On force les drapeaux d'optimisation :
sed -i "s|^\(QMAKE_CFLAGS_RELEASE.*\)|\1 ${FLAGS}|"   qtbase/mkspecs/common/gcc-base.conf
sed -i "s|^\(QMAKE_LFLAGS_RELEASE.*\)|\1 ${LDFLAGS}|" qtbase/mkspecs/common/g++-unix.conf

# Compilation :
export QT5LINK=/usr
export CFLAGS=${FLAGS}
export CXXFLAGS=${FLAGS}
export OPENSOURCE_CXXFLAGS=${FLAGS}

# On évite de se lier aux versions installées :
export LD_LIBRARY_PATH=${CWD}/qtbase/lib:${CWD}/qttools/lib:${LD_LIBRARY_PATH}
export QT_PLUGIN_PATH=${CWD}/qtbase/plugins

./configure \
	-prefix /usr \
	-archdatadir /usr/lib${LIBDIRSUFFIX}/qt5 \
	-bindir /usr/lib${LIBDIRSUFFIX}/qt5/bin \
	-datadir /usr/share/qt5 \
	-docdir /usr/doc/${NAMETGZ}-${VERSION} \
	-headerdir /usr/include/qt5 \
	-libdir /usr/lib${LIBDIRSUFFIX} \
	-sysconfdir /etc/xdg \
	-accessibility \
	-confirm-license \
	-dbus-linked \
	-glib \
	-icu \
	-no-pch \
	-no-rpath \
	-no-separate-debug-info \
	-no-strip \
	-nomake examples \
	-opensource \
	-openssl \
	-optimized-qmake \
	-plugin-sql-sqlite \
	-qpa xcb \
	-pulseaudio \
	-reduce-relocations \
	-release \
	-system-libjpeg \
	-system-libpng \
	-system-pcre \
	-system-sqlite \
	-system-zlib \
	-xcb

make -j${JOBS} || make
fakeroot make install INSTALL_ROOT=${PKG}

# On construit la doc :
for doc in $(find . -name "Makefile*" | xargs egrep "^\s/usr/lib${LIBDIRSUFFIX}/qt5/bin/" | cut -d':' -f1) ; do
	rm -f $doc
done
make -j${JOBS} docs || make docs
fakeroot make install_docs INSTALL_ROOT=${PKG}

# Les binaires doivent recevoir un traitement particulier :
mkdir -p ${PKG}/usr/bin
for BIN in ${PKG}/usr/lib${LIBDIRSUFFIX}/qt5/bin/*; do
	TMP_FILE=$(echo ${BIN} | sed -e "s|$PKG||")
	case $(basename ${BIN}) in
		syncqt.pl)
			ln -sf ${TMP_FILE} ${PKG}/usr/bin/$(basename ${BIN})
		;;
		*)
			ln -sf ${TMP_FILE} ${PKG}/usr/bin/$(basename ${BIN})-qt5
		;;
	esac
done

# On supprime des résidus de la compilation.
# Pour Noël, je voudrais des fichiers propres pour Qt...
sed -i "s:${CWD}/qtbase:/usr/lib${LIBDIRSUFFIX}/qt5:g" \
	${PKG}/usr/lib${LIBDIRSUFFIX}/qt5/mkspecs/modules/qt_lib_bootstrap_private.pri || true
find /usr/lib${LIBDIRSUFFIX}/lib{qgsttools_p,Qt5*}.prl -exec sed -i -r '/^QMAKE_PRL_BUILD_DIR/d;s/(QMAKE_PRL_LIBS =).*/\1/' {} \; || true
sed -i \
	-e "s|-Wl,-whole-archive -lWebKit1 -Wl,-no-whole-archive -L.*/qtwebkit/Source/WebKit[^ ]* ||" \
	-e "s|-Wl,-whole-archive -lWebKit2 -Wl,-no-whole-archive -L.*/qtwebkit/Source/WebKit2[^ ]* ||" \
	-e "s|-Wl,-whole-archive -lWebCore -Wl,-no-whole-archive -L.*/qtwebkit/Source/WebCore[^ ]* ||" \
	-e "s|-Wl,-whole-archive -lANGLE -Wl,-no-whole-archive -L.*/qtwebkit/Source/ThirdParty/ANGLE[^ ]* ||" \
	-e "s|-Wl,-whole-archive -lJavaScriptCore -Wl,-no-whole-archive -L.*/qtwebkit/Source/JavaScriptCore[^ ]* ||" \
	-e "s|-Wl,-whole-archive -lWTF -Wl,-no-whole-archive -L.*/qtwebkit/Source/WTF[^ ]* ||" \
	-e "s|-Wl,-whole-archive -lleveldb -Wl,-no-whole-archive -L.*/qtwebkit/Source/ThirdParty/leveldb[^ ]* ||" \
	${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig/Qt5WebKit.pc

# On place les icônes :
mkdir -p ${PKG}/usr/share/icons/hicolor/{16x16,32x32,48x48,64x64,128x128}/apps
cp -a qttools/src/assistant/assistant/images/assistant.png     ${PKG}/usr/share/icons/hicolor/32x32/apps/qt5-assistant.png || true
cp -a qttools/src/assistant/assistant/images/assistant-128.png ${PKG}/usr/share/icons/hicolor/128x128/apps/qt5-assistant.png || true
cp -a qttools/src/designer/src/designer/images/designer.png    ${PKG}/usr/share/icons/hicolor/128x128/apps/qt5-designer.png || true

for icone in qttools/src/linguist/linguist/images/icons/linguist-*-32.png ; do
	taille=$(echo $(basename ${icone}) | cut -d- -f2)
	cp -a ${icone} ${PKG}/usr/share/icons/hicolor/${taille}x${taille}/apps/qt5-linguist.png || true
done

# On ajoute les raccourcis bureau :
mkdir -p ${PKG}/usr/share/applications
cat > ${PKG}/usr/share/applications/qt5-designer.desktop << EOF
[Desktop Entry]
Name=Qt5 Designer
GenericName=Interface Designer
Comment=Design GUIs for Qt5 applications
Comment[fr]=Contruisez des interfaces pour applications Qt5
Exec=designer -qt=5
Icon=qt5-designer
MimeType=application/x-designer;
Terminal=false
Encoding=UTF-8
Type=Application
Categories=Qt;Development;

EOF

cat > ${PKG}/usr/share/applications/qt5-assistant.desktop << EOF
[Desktop Entry]
Name=Qt5 Assistant
Comment=Exemples et documentation de Qt5
Exec=assistant -qt=5
Icon=qt5-assistant
Terminal=false
Encoding=UTF-8
Type=Application
Categories=Qt;Development;Documentation;

EOF

cat > ${PKG}/usr/share/applications/qt5-linguist.desktop << EOF
[Desktop Entry]
Name=Qt5 Linguist
Comment=Localisation d'applications Qt5
Exec=linguist -qt=5
Icon=qt5-linguist
MimeType=text/vnd.trolltech.linguist;application/x-linguist;
Terminal=false
Encoding=UTF-8
Type=Application
Categories=Qt;Development;

EOF
cat > ${PKG}/usr/share/applications/qt5-qdbusviewer.desktop << EOF
[Desktop Entry]
Name=Qt5 QDbusViewer 
GenericName=D-Bus Debugger
Comment=Debug D-Bus applications
Exec=qdbusviewer
Icon=qt-logo.png
Terminal=false
Encoding=UTF-8
Type=Application
Categories=Qt;Development;Debugger;

EOF

# On crée le fichier profil pour s'assurer des variables d'environnement :
mkdir -p ${PKG}/etc/profile.d
cat > ${PKG}/etc/profile.d/qt5.sh << EOF
#!/usr/bin/env bash
# Fichier profil pour Qt5.
QT5DIR=/usr/lib${LIBDIRSUFFIX}/qt5

export QT5DIR

EOF
chmod +x ${PKG}/etc/profile.d/qt5.sh

# On nettoie toute saleté éventuelle :
rm -rf ${PKG}/usr/{demos,examples,tests}

installer_doc
creer_post_installation
stripper
empaqueter

# C'est fini.
