#!/usr/bin/env bash
. /usr/share/0outils/fonctions_paquets.sh

# '0-chroot' « chroot » un système minimal contenant une chaîne d'outils
# temporaire comme celle du paquet '0linux-toolchain', installé
# au préalable à l'aide de l'option --root de 'spackadd' :
#		spackadd --root=/quelque/part/mon_chroot/ 0-toolchain-xxx-arch-x.spack
#
# '0-chroot.recette' permet de compiler les paquets de façon native dans une racine
# dédiée (utile pour les nouvelles chaînes d'outils). Il faut :
#
# 	- avoir ses systèmes de fichiers virtuels montés (/proc, /sys, /dev,
#     et /run)
#	- une partition d'échange « swap » (ou beaucoup de mémoire vive)
# 	- avoir installé le paquet '0linux-toolchain-xxx-arch-x.spack' dans un
#     répertoire spécifique et affecter ce répertoire à la variable SYSROOT.
# 	- pensez à monter l'emplacement des recettes et des archives_sources sous
#     votre racine $SYSROOT au préalable. Par exemple, je stocke tout dans mon
#     '/home' ; je fais donc avant de lancer ce script :
#
#		# mkdir -p /chroot-0linux-x86_64/home
#		# mount --bind /home /chroot-0linux-x86_64/home
#
#     Puis on prépare le chroot :
#
#		# SYSROOT=/chroot-0linux-x86_64 ./0-chroot.recette
#
#     Puis, une fois dans le chroot, on fait un :
#
#		# export PKGSOURCES=/home/appzer0/0/pub/archives_sources
#
#     ...  pour pouvoir construitre les paquets.
#
# Une fois dans le chroot, il faut :
#   - compiler perl dans /tools
#   - compiler les entêtes Linux dans /usr
#   - compiler glibc (32 bits puis 64 bits pour le multilib) en ajustant
#     l'éditeur de liens pour ne plus pointer sur /tools
#
#   Pour la méthode, voyez :
#   http://clfs.org/view/sysvinit/x86_64/final-system/temp-perl.html
#
#   Puis suivez les étapes de Perl jusqu'à la glibc.

# On vérifie qu'on est bien root :
if [ ! "$(whoami)" = "root" ]; then
	echo "Erreur : seul root peut m'exécuter !"
	exit 1
fi

# Pour définir $PKGARCH, $LIBDIRSUFFIX, etc.
cflags

# Le répertoire contenant le système minimal préalablement installé par le
# paquet '0linux-toolchain' :
SYSROOT=${SYSROOT:-/chroot-0linux-${PKGARCH}}

# On crée les emplacements en premier lieu:
mkdir -p ${SYSROOT}/{boot,etc,dev/{pts,shm},home,media,mnt,opt,proc,root,run,srv,sys,tmp,{var/log/packages,var/run}}
mkdir -p ${SYSROOT}/usr/{bin,dict,doc,include,info,lib${LIBDIRSUFFIX},local/{logs,paquets/${PKGARCH}},man,sbin,share,src}
mkdir -p ${SYSROOT}/var/{log,mail,spool}
mkdir -p ${SYSROOT}/var/{opt,cache,lib{,${LIBDIRSUFFIX}}/{misc,locate},local}

# Les liens sous '/usr' pour les binaires et les bibliothèques :
ln -sf usr/bin ${SYSROOT}/bin
ln -sf usr/sbin ${SYSROOT}/sbin
ln -sf usr/lib${LIBDIRSUFFIX} ${SYSROOT}/lib${LIBDIRSUFFIX}

# Le multilib requiert 2 répertoires distincts :
if [ "${PKGARCH}" = "x86_64" ]; then
	mkdir -p ${SYSROOT}/usr/lib
	ln -sf usr/lib ${SYSROOT}/lib
	ln -sf ../lib/locale ${SYSROOT}/usr/lib${LIBDIRSUFFIX}
else
	# On lie un 'lib' standard pour tous les autres cas :
	if [ ! "${LIBDIRSUFFIX}" = "" ]; then
		ln -sf lib${LIBDIRSUFFIX} ${SYSROOT}/usr/lib
	fi
fi

# Ce lien francophopne est présent dans les scripts de construction de 0Linux :
ln -sf packages ${SYSROOT}/var/log/paquets

# Quelques fichiers de configuration nécessaires :
touch ${SYSROOT}/etc/{fstab,mtab,ld.so.conf}

# On monte les systèmes de fichiers virtuels de l'hôte dans le chroot :
mount --bind /dev      ${SYSROOT}/dev
mount --bind /proc     ${SYSROOT}/proc
mount --bind /run      ${SYSROOT}/run
mount --bind /sys      ${SYSROOT}/sys

mkdir -p ${SYSROOT}/dev/pts
mkdir -p ${SYSROOT}/dev/shm
chmod 1777 /dev/shm

mount --bind /dev/shm  ${SYSROOT}/dev/shm
mount --bind /dev/pts  ${SYSROOT}/dev/pts

# Ces binaires sont essentiels car certains paquets les codent en dur. On crée
# donc des liens sur la racine pointant vers la chaîne d'outils :
ln -sf /tools/bin/{bash,cat,echo,env,file,gcc,grep,login,passwd,pwd,sleep,stty,tee,true} ${SYSROOT}/bin/
ln -sf /tools/sbin/{agetty,blkid}   ${SYSROOT}/sbin/
ln -sf /tools/lib/libgcc_s.so{,.1}  ${SYSROOT}/usr/lib${LIBDIRSUFFIX}/
ln -sf /tools/lib/libstdc++.so{,.6} ${SYSROOT}/usr/lib${LIBDIRSUFFIX}/
ln -sf /run ${SYSROOT}/var/run
ln -sf ../run/lock ${SYSROOT}/var/

if [ "${PKGARCH}" = "x86_64" ]; then
	ln -sf /tools/lib/libgcc_s.so{,.1}  ${SYSROOT}/usr/lib/
	ln -sf /tools/lib/libstdc++.so{,.6} ${SYSROOT}/usr/lib/
fi

ln -sf /tools/lib${LIBDIRSUFFIX}/libgcc_s.so{,.1} ${SYSROOT}/usr/lib${LIBDIRSUFFIX}/
ln -sf /tools/lib${LIBDIRSUFFIX}/libstdc++.so{,.6} ${SYSROOT}/usr/lib${LIBDIRSUFFIX}/

# Le très important lien 'sh ' -> 'bash' :
ln -sf bash ${SYSROOT}/bin/sh

# Le très important lien 'cc ' -> 'gcc' :
ln -sf gcc ${SYSROOT}/usr/bin/cc

# On copie les outils pour les paquets :
mkdir -p ${SYSROOT}/usr/share/0outils
cp /usr/share/0outils/fonctions_paquets.sh ${SYSROOT}/usr/share/0outils/
chmod +x ${SYSROOT}/usr/share/0outils/fonctions_paquets.sh

# On crée de quoi permettre à root d'être reconnu :
if [ ! -f ${SYSROOT}/etc/passwd ]; then
	echo "root:x:0:0:root:/root:/bin/bash" > ${SYSROOT}/etc/passwd
	
	cat > ${SYSROOT}/etc/group << "EOF"
root:x:0:
bin:x:1:
sys:x:2:
kmem:x:3:
tty:x:4:
tape:x:5:
daemon:x:6:
floppy:x:7:
disk:x:8:
lp:x:9:
dialout:x:10:
audio:x:11:
video:x:12:
utmp:x:13:
usb:x:14:
cdrom:x:15:
EOF

fi

# On spécifie certaines permissions et on crée des fichiers nécessaires au login :
chmod 1710 ${SYSROOT}/root
chmod 1777 ${SYSROOT}/tmp
chmod -R 777 ${SYSROOT}/usr/local/{logs,paquets}
touch ${SYSROOT}/var/run/utmp ${SYSROOT}/var/log/{btmp,lastlog,wtmp}
chgrp utmp ${SYSROOT}/var/run/utmp ${SYSROOT}/var/log/lastlog
chmod 664 ${SYSROOT}/var/run/utmp ${SYSROOT}/var/log/lastlog
chmod 600 ${SYSROOT}/var/log/btmp
chown -R 0:0 ${SYSROOT}/cross-tools 
chown -R 0:0 ${SYSROOT}/tools

echo "Le chroot est préparé dans ${SYSROOT}."
echo "Vous n'avez plus qu'à invoquer cette commande pour y entrer :"
echo ""
echo "chroot ${SYSROOT} /tools/bin/env -i HOME=/root TERM=linux PS1='0-CHROOT# ' PATH=/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin:/tools/sbin:/tools/usr/bin:/tools/usr/sbin LANG=POSIX LC_ALL=POSIX /tools/bin/bash --login +h"
echo ""
echo "N'oubliez pas de démonter ces sytèmes de fichiers quand vous serez sorti du chroot :"
echo "à l'aide de la commande suivante :"
echo ""
echo "umount -f ${SYSROOT}/{dev/{pts,shm},proc,sys,run}"
echo ""

# C'est fini.
